#!/bin/bash
# curl -sS https://raw.github.com/ahmedelgabri/dotfiles/master/script/install | sh

# =======================================================================
# = Helpers & setting some variables
# =======================================================================

local DOTFILES_DIR="$HOME/.dotfiles"

tput sgr0
local RED=$(tput setaf 1)
local ORANGE=$(tput setaf 3)
local GREEN=$(tput setaf 2)
local PURPLE=$(tput setaf 5)
local BLUE=$(tput setaf 4)
local WHITE=$(tput setaf 7)
local BOLD=$(tput bold)
local RESET=$(tput sgr0)

log_error() {
  local MSG="$1"
  let COL=$(tput cols)-2-${#MSG}+${#RESET}

  printf "${RED}%*s${RESET}" $(tput cols) | tr ' ' '='
  printf "%s%${COL}s" "$RED= $MSG" "[FAIL]$RESET"
  printf "${RED}%*s${RESET}" $(tput cols) | tr ' ' '='

  exit 1
}

log_success() {
  local MSG="$1"
  let COL=$(tput cols)-2-${#MSG}+${#RESET}

  printf "${GREEN}%*s${RESET}" $(tput cols) | tr ' ' '='
  printf "%s%${COL}s" "$GREEN= $MSG" "[OK]$RESET"
  printf "${GREEN}%*s${RESET}" $(tput cols) | tr ' ' '='
}

# =======================================================================
# = Main functions
# =======================================================================

install_homebrew() {
  # Check for Homebrew,
  # Install if we don't have it
  # Homebrew will also handle Command line tools installation
  # https://github.com/Homebrew/brew/blob/8ea778f7c7ea790694485030d105a92a9416ef33/Library/Homebrew/extend/os/mac/development_tools.rb#L25-L43

  if ! command -v brew >/dev/null; then
    log_success "Installing Homebrew"
    ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    brew install stow

    # xcodebuild -license accept # To accept Xcode EULA
  fi
}

install_dotfiles() {
  if [[ ! -d $DOTFILES_DIR ]]; then
    log_success "Cloning dotfiles..."
    git clone --recursive https://github.com/ahmedelgabri/dotfiles.git "$DOTFILES_DIR"
  else
    cd "$DOTFILES_DIR" && \
    git stash && \
    git checkout master && \
    git reset --hard origin/master && \
    git submodule update --init --recursive && \
    git checkout - && \
    git stash pop
  fi
}

take_backup() {
  log_success "Taking backups for old files..."

  local BAKCUP_DIR="$HOME/.dotbackup/$(date "+%Y.%m.%d_%H.%M")"
  mkdir -p "$BAKCUP_DIR"

  # @TODO: Look into how to automate this list
  local FILES=(
    ".config/newsbeuter"
    ".config/nvim"
    ".ctags"
    ".curlrc"
    ".editorconfig"
    ".gemrc"
    ".gitattributes"
    ".gitconfig"
    ".gitignore"
    ".grc"
    ".gvimrc"
    ".hammerspoon"
    ".hushlogin"
    ".hushlogin"
    ".ignore"
    ".lbdbrc"
    ".mbsyncrc"
    ".msmtprc"
    ".mutt"
    ".notmuch-config"
    ".pip.conf"
    ".pyrc.py"
    ".terminfo"
    ".tern-config"
    ".tigrc"
    ".tmux.conf"
    ".urlview"
    ".vim"
    ".vimrc"
    ".zlogin"
    ".zshenv"
    ".zshrc"
    "Library/Preferences/com.googlecode.iterm2.plist"
  )

  for file in "${FILES[@]}"; do
    local ITEM="$HOME/$file"

    # [[]] doesn't require quotes around single variables in fact it fails with double quotes around variables
    # https://stackoverflow.com/a/4665080/213124
    if [[ -e $ITEM ]]; then
      echo "Backing up: $ITEM"
      mv "$ITEM" "$BAKCUP_DIR"
    fi
  done
}

symlink_files() {
  log_success "Create some required folders..."

  if [[ ! -d "$HOME/.config" ]]; then
    mkdir $HOME/.config
  fi

  mkdir -p $HOME/.mail/{Personal,Work}

  if [[ -d $DOTFILES_DIR ]]; then
    log_success "Symlinking files/folders..."
    cd "$DOTFILES_DIR" && make symlink
  else
    log_error "There is no $DOTFILES_DIR directory"
  fi
}

install_apps(){
  if [[ -d $DOTFILES_DIR ]]; then
    log_success "Installing apps & tools, this will take a while..."
    cd "$DOTFILES_DIR" && make
  else
    log_error "There is no $DOTFILES_DIR directory"
  fi
}

change_shell() {
  log_success "Switching shell to (homebrew) zsh..."
  echo "/usr/local/bin/zsh" | sudo tee -a /etc/shells > /dev/null
  chsh -s "/usr/local/bin/zsh" "$(whoami)"
}

# =======================================================================
# = Run!
# =======================================================================

cat <<EOF
$BLUE
                            _       _    __ _ _
                           | |     | |  / _(_) |
                         __| | ___ | |_| |_ _| | ___  ___
                        / _. |/ _ \| __|  _| | |/ _ \/ __|
                       | (_| | (_) | |_| | | | |  __/\__ \ $()
                      (_)__,_|\___/ \__|_| |_|_|\___||___/


                      $RESET~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$BLUE
                      $RESET$BLUE
                      $RESET   $(git log -n 1 --pretty=format:'%C(yellow)commit:  %h') $BLUE
                      $RESET   $(git log -n 1 --pretty=format:'%C(red)date:    %ad' --date=short) $BLUE
                      $RESET   $(git log -n 1 --pretty=format:'%C(cyan)author:  %an') $BLUE
                      $RESET   $(git log -n 1 --pretty=format:'%C(green)message: %s') $BLUE
                      $RESET$BLUE
                      $RESET~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~$BLUE
$RESET
EOF

# Ask for the administrator password upfront.
sudo -v

# Keep-alive: update existing `sudo` time stamp until the script has finished.
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

cd "$HOME"
softwareupdate --verbose --install --all

install_homebrew
install_dotfiles
take_backup
symlink_files
install_apps
change_shell

if [ $? -eq 0 ]; then
  log_success "Done."
  # log_success "Change your zsh to the brew installed one. and run \"make\""
  log_success "Don't forget to generate SSH keys, symlink files from box & source .macos"
  log_success "!!!!! Run transcrypt -c <CIPHER> -p '<PASSWORD' to decrypt encrypted files !!!!!!"
else
  log_error "Something went wrong, [ Failed on: $(fc -ln -1) ]"
fi

