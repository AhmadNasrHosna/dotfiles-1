# SSH key http://kb.mediatemple.net/questions/1626/Using+SSH+keys+on+your+server#all/-instructions--
# $1 = keyname
# $2 = Email ID used
new_SSH(){
    ssh-keygen -t rsa -b 2048 -f ~/.ssh/$1 -C "$2"
    cat ~/.ssh/$1.pub | pbcopy
    echo -e "------------------------------------------------------------\n"
    echo -e "$fg[green]($1.pub) has been created & copied to your clipboard $reset_color\n"
    echo -e "------------------------------------------------------------\n"
}

copy_SSH(){
    pbcopy < ~/.ssh/$@.pub
}

# WordPress latest
new_wp() {
  latest="http://wordpress.org/latest.zip"
  curl -O $latest
  unzip latest.zip
  rm -rf __MACOSX latest.zip
  cp -rf ./wordpress/* ./
  rm -rf ./wordpress/
  mkdir ./wp-content/uploads/
  mv wp-config-sample.php wp-config.php
  touch .htaccess
  subl wp-config.php
  open https://api.wordpress.org/secret-key/1.1/salt/
}

# make a directory and cd to it
mcd() {
    test -d "$1" || mkdir "$1" && cd "$1"
}


# Extract most know archives with one command
# http://alias.sh/extract-most-know-archives-one-command
extract () {
    if [ -f $1 ] ; then
      case $1 in
        *.tar.bz2)   tar xjf $1     ;;
        *.tar.gz)    tar xzf $1     ;;
        *.bz2)       bunzip2 $1     ;;
        *.rar)       unrar e $1     ;;
        *.gz)        gunzip $1      ;;
        *.tar)       tar xf $1      ;;
        *.tbz2)      tar xjf $1     ;;
        *.tgz)       tar xzf $1     ;;
        *.zip)       unzip $1       ;;
        *.Z)         uncompress $1  ;;
        *.7z)        7z x $1        ;;
        *)     echo "'$1' cannot be extracted via extract()" ;;
         esac
     else
         echo "'$1' is not a valid file"
     fi
}


# vHosts
vhosts() {
  subl /etc/hosts
  subl /etc/apache2/extra/httpd-vhosts.conf
}

# Git functions
git_since(){
  git lg --since=$@
}

git_until(){
  git lg --until=$@
}

git_author(){
  git lg --author="$@"
}

git_grep(){
  git lg --grep="$@"
}

gitwork(){
    git config user.email "$1"
}

# Forked from https://gist.github.com/ethanmuller/4673740
# @TODO: Clean it up a bit & understand it more!

blank_init() {
  if [[ $# != 1 ]]; then
    echo -e "$fg[red] Please specify a project name.$reset_color"
    echo -e "Usage: init project-name\n"
  else
    if ! type "ruby" > /dev/null; then
      echo -e "$fg[red] Please install Ruby:$reset_color"
      echo "http://www.ruby-lang.org/en/downloads/"
    else
      if ! type "npm" > /dev/null; then
        echo -e "$fg[red] Please install Node:$reset_color"
        echo "http://nodejs.org/download/ or 'brew install node' if you have homebrew installed"
      else
        if ! type "grunt" > /dev/null; then
          echo -e "$fg[red] Please install grunt-cli:$reset_color"
          echo "npm install grunt-cli"
        else
          echo -e "$fg[yellow] Downloading Blank$reset_color\n"
          curl -s -S -O -L https://github.com/ahmedelgabri/Blank/archive/master.zip;
          echo -e "$fg[green] Download finished.$reset_color\n"
          echo -e "$fg[yellow] Setting up project config files.$reset_color\n"
          unzip -qq master.zip;
          rm master.zip;
          mv Blank-master $1
          sed -i.bak "s/Project-Name/$1/g" $1/package.json;
          rm $1/package.json.bak;
          # sed -i.bak "s/Project-Name/$1/g" $1/.rvmrc;
          # rm $1/.rvmrc.bak;
          cd $1
          npm install;
          grunt -v && open http://localhost:9000;
          # bundle;
          echo -e "$fg[green] Your project is all ready to go. Enjoy$reset_color\n"
        fi
      fi
    fi
  fi
}

# Start an HTTP server from a directory, optionally specifying the port
# Works like this "server <LANG>(default python simple server) <PORT>"
server() {
    local port="${2:-8000}"
    open "http://localhost:${port}/"

    if [[ "$1" == "ruby" ]]; then
        ruby -run -ehttpd . -p$port
    elif [[ "$1" == "sinatra" ]]; then
        ruby -rsinatra -e'set :public_folder, "."; set :port, $port'
    elif [[ "$1" == "php" ]]; then
        php -S localhost:$port
    else
        # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
        # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
        python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
    fi
}

# Search dash app
# dash js:tostring or dash tostring
dash(){
    open "dash://$@"
}

explain() {
  # base url with first command already injected
  # $ explain tar
  #   => http://explainshel.com/explain/tar?args=
  url="http://explainshell.com/explain/$1?args="

  # removes $1 (tar) from arguments ($@)
  shift;

  # iterates over remaining args and adds builds the rest of the url
  for i in "$@"; do
    url=$url"$i""+"
  done

  # opens url in browser
  open $url
}

# gitignore.io
gi() {
  curl http://gitignore.io/api/\$@ ;
}


spectrum_ls() {
  for code in {000..255}; do
    print -P -- "$code: %F{$code}Test%f"
  done
}

spectrum_bls() {
  for code in {000..255}; do
    ((cc = code + 1))
    print -P -- "$BG[$code]$code: Test %{$reset_color%}"
  done
}


# New Github repo

github-create() {
  repo_name=$1

  dir_name=`basename $(pwd)`

  if [[ "$repo_name" = "" ]]; then
    echo "Repo name (hit enter to use '$dir_name')?"
    read repo_name
  fi

  if [[ "$repo_name" = "" ]]; then
    repo_name=$dir_name
  fi

  if [[ "$GITHUB_USER" = "" ]]; then
    echo "Could not find username, add 'export GITHUB_USER=<username>'"
    invalid_credentials=1
  fi

  if [[ "$GITHUB_GLOBAL_TOKEN" = "" ]]; then
    echo "Could not find token, add 'export GITHUB_GLOBAL_TOKEN=<token>'"
    invalid_credentials=1
  fi

  if [[ "$invalid_credentials" == "1" ]]; then
    return 1
  fi

  echo -n "Creating Github repository '$repo_name' ..."
  curl -u "$GITHUB_USER:$GITHUB_GLOBAL_TOKEN" https://api.github.com/user/repos -d '{"name":"'$repo_name'"}' > /dev/null 2>&1
  echo " done."

  echo -n "Pushing local code to remote ..."
  git remote add origin git@github.com:$GITHUB_USER/$repo_name.git > /dev/null 2>&1
  git push -u origin master > /dev/null 2>&1
  echo " done."
}
